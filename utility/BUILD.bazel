load("@io_bazel_rules_kotlin//kotlin:kotlin.bzl", "kt_android_library")
load("@rules_jvm_external//:defs.bzl", "artifact")
load("@dagger//:workspace_defs.bzl", "dagger_rules")

package(default_visibility = ["//visibility:public"])

kt_android_library(
    name = "utility_lib",
    custom_package = "org.oppia.util",
    srcs = glob(
        ["src/main/java/org/oppia/util/**/*.kt"],
        exclude = [
            "src/main/java/org/oppia/util/logging/*.kt",
            "src/main/java/org/oppia/util/threading/*.kt"
        ]
    ),
    resource_files = glob(["src/main/res/**/*.xml", "src/main/res/**/*.png"]),
    manifest = "src/main/AndroidManifest.xml",
    deps = [
        ":dagger",
        "//model:model_lib",
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
        artifact("com.google.truth:truth"),
        artifact("androidx.appcompat:appcompat"),
        artifact("com.github.bumptech.glide:glide"),
        artifact("com.github.bumptech.glide:compiler"),
        artifact("com.caverock:androidsvg-aar"),
        artifact("androidx.lifecycle:lifecycle-livedata-ktx"),
        artifact("com.google.firebase:firebase-analytics-ktx"),
        artifact("com.crashlytics.sdk.android:crashlytics:2.9.8"),
        artifact("io.fabric.sdk.android:fabric:1.4.7"),
        artifact("com.google.gms:google-services:4.3.3"),
        artifact("com.android.support:support-annotations"),
        artifact("androidx.test.ext:junit"),
        artifact("org.mockito:mockito-core:2.19.0"),
    ],
)

#TODO: Have each library in utility contain a different rule
kt_android_library(
    name = "utility_logging_threading_accessibility_lib",
    custom_package = "org.oppia.util",
    srcs = glob([
        "src/main/java/org/oppia/util/logging/*.kt",
        "src/main/java/org/oppia/util/threading/*.kt",
        "src/main/java/org/oppia/util/accessibility/*.kt",
        ]),
    resource_files = glob(["src/main/res/**/*.xml", "src/main/res/**/*.png"]),
    manifest = "src/main/AndroidManifest.xml",
    deps = [
        ":dagger",
        "//model:model_lib",
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
        artifact("com.google.truth:truth"),
        artifact("androidx.appcompat:appcompat"),
        artifact("com.github.bumptech.glide:glide"),
        artifact("com.github.bumptech.glide:compiler"),
        artifact("com.caverock:androidsvg-aar"),
        artifact("androidx.lifecycle:lifecycle-livedata-ktx"),
        artifact("com.google.firebase:firebase-analytics-ktx"),
        artifact("com.crashlytics.sdk.android:crashlytics:2.9.8"),
        artifact("io.fabric.sdk.android:fabric:1.4.7"),
        artifact("com.google.gms:google-services:4.3.3"),
        artifact("com.android.support:support-annotations"),
        artifact("androidx.test.ext:junit"),
        artifact("org.mockito:mockito-core:2.19.0"),
    ],
)

#TODO: Get android_local_test working with kotlin files
'''
kt_android_library(
    name = "test_lib",
    custom_package = "org.oppia.util",
    srcs = glob(["src/test/**/*.kt"]),
    resource_files = glob(["src/main/res/**/*.xml", "src/main/res/**/*.png"]),
    manifest = "src/main/AndroidManifest.xml",
    deps = [
        ":dagger",
        ":utility_lib",
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
        #artifact("androidx.appcompat:appcompat:1.0.2"),
    ],
)


android_local_test(
  name = "all_tests",
  custom_package = "org.oppia.util",
  test_class = "org.oppia.util",
  deps = [
      ":dagger",
      ":test_lib",
      "@robolectric//bazel:android-all",
      artifact("org.robolectric:robolectric"),
      artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
      artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
      artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
      artifact("junit:junit"),
  ],
)
'''

dagger_rules()
