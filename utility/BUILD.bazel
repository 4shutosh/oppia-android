load("@io_bazel_rules_kotlin//kotlin:kotlin.bzl", "kt_android_library")
load("@rules_jvm_external//:defs.bzl", "artifact")
load("@dagger//:workspace_defs.bzl", "dagger_rules")

package(default_visibility = ["//visibility:public"])

kt_android_library(
    name = "utility_accessibility_lib",
    custom_package = "org.oppia.util",
    srcs = glob(["src/main/java/org/oppia/util/accessibility/*.kt"]),
    resource_files = glob(["src/main/res/**/*.xml"]),
    manifest = "src/main/AndroidManifest.xml",
    deps = [
        ":dagger",
        "//model:model_lib",
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
        artifact("com.google.truth:truth"),
        artifact("androidx.appcompat:appcompat"),
        artifact("com.github.bumptech.glide:glide"),
        artifact("com.github.bumptech.glide:compiler"),
        artifact("com.caverock:androidsvg-aar"),
        artifact("androidx.lifecycle:lifecycle-livedata-ktx"),
        artifact("com.google.firebase:firebase-analytics-ktx"),
        artifact("com.crashlytics.sdk.android:crashlytics:2.9.8"),
        artifact("io.fabric.sdk.android:fabric:1.4.7"),
        artifact("com.google.gms:google-services:4.3.3"),
        artifact("com.android.support:support-annotations"),
        artifact("androidx.test.ext:junit"),
        artifact("org.mockito:mockito-core:2.19.0"),
    ],
)

kt_android_library(
    name = "utility_caching_lib",
    custom_package = "org.oppia.util",
    srcs = glob(["src/main/java/org/oppia/util/caching/*.kt"]),
    resource_files = glob(["src/main/res/**/*.xml"]),
    manifest = "src/main/AndroidManifest.xml",
    deps = [
        ":dagger",
        "//model:model_lib",
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
        artifact("com.google.truth:truth"),
        artifact("androidx.appcompat:appcompat"),
        artifact("com.github.bumptech.glide:glide"),
        artifact("com.github.bumptech.glide:compiler"),
        artifact("com.caverock:androidsvg-aar"),
        artifact("androidx.lifecycle:lifecycle-livedata-ktx"),
        artifact("com.google.firebase:firebase-analytics-ktx"),
        artifact("com.crashlytics.sdk.android:crashlytics:2.9.8"),
        artifact("io.fabric.sdk.android:fabric:1.4.7"),
        artifact("com.google.gms:google-services:4.3.3"),
        artifact("com.android.support:support-annotations"),
        artifact("androidx.test.ext:junit"),
        artifact("org.mockito:mockito-core:2.19.0"),
    ],
)

kt_android_library(
    name = "utility_data_lib",
    custom_package = "org.oppia.util",
    srcs = glob(["src/main/java/org/oppia/util/data/*.kt"]),
    resource_files = glob(["src/main/res/**/*.xml"]),
    manifest = "src/main/AndroidManifest.xml",
    deps = [
        ":dagger",
        "//model:model_lib",
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
        artifact("com.google.truth:truth"),
        artifact("androidx.appcompat:appcompat"),
        artifact("com.github.bumptech.glide:glide"),
        artifact("com.github.bumptech.glide:compiler"),
        artifact("com.caverock:androidsvg-aar"),
        artifact("androidx.lifecycle:lifecycle-livedata-ktx"),
        artifact("com.google.firebase:firebase-analytics-ktx"),
        artifact("com.crashlytics.sdk.android:crashlytics:2.9.8"),
        artifact("io.fabric.sdk.android:fabric:1.4.7"),
        artifact("com.google.gms:google-services:4.3.3"),
        artifact("com.android.support:support-annotations"),
        artifact("androidx.test.ext:junit"),
        artifact("org.mockito:mockito-core:2.19.0"),
    ],
)

kt_android_library(
    name = "utility_datetime_lib",
    custom_package = "org.oppia.util",
    srcs = glob(["src/main/java/org/oppia/util/datetime/*.kt"]),
    resource_files = glob(["src/main/res/**/*.xml"]),
    manifest = "src/main/AndroidManifest.xml",
    deps = [
        ":dagger",
        "//model:model_lib",
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
        artifact("com.google.truth:truth"),
        artifact("androidx.appcompat:appcompat"),
        artifact("com.github.bumptech.glide:glide"),
        artifact("com.github.bumptech.glide:compiler"),
        artifact("com.caverock:androidsvg-aar"),
        artifact("androidx.lifecycle:lifecycle-livedata-ktx"),
        artifact("com.google.firebase:firebase-analytics-ktx"),
        artifact("com.crashlytics.sdk.android:crashlytics:2.9.8"),
        artifact("io.fabric.sdk.android:fabric:1.4.7"),
        artifact("com.google.gms:google-services:4.3.3"),
        artifact("com.android.support:support-annotations"),
        artifact("androidx.test.ext:junit"),
        artifact("org.mockito:mockito-core:2.19.0"),
    ],
)

kt_android_library(
    name = "utility_extensions_lib",
    custom_package = "org.oppia.util",
    srcs = glob(["src/main/java/org/oppia/util/extensions/*.kt"]),
    resource_files = glob(["src/main/res/**/*.xml"]),
    manifest = "src/main/AndroidManifest.xml",
    deps = [
        ":dagger",
        "//model:model_lib",
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
        artifact("com.google.truth:truth"),
        artifact("androidx.appcompat:appcompat"),
        artifact("com.github.bumptech.glide:glide"),
        artifact("com.github.bumptech.glide:compiler"),
        artifact("com.caverock:androidsvg-aar"),
        artifact("androidx.lifecycle:lifecycle-livedata-ktx"),
        artifact("com.google.firebase:firebase-analytics-ktx"),
        artifact("com.crashlytics.sdk.android:crashlytics:2.9.8"),
        artifact("io.fabric.sdk.android:fabric:1.4.7"),
        artifact("com.google.gms:google-services:4.3.3"),
        artifact("com.android.support:support-annotations"),
        artifact("androidx.test.ext:junit"),
        artifact("org.mockito:mockito-core:2.19.0"),
    ],
)

kt_android_library(
    name = "utility_gcsresource_lib",
    custom_package = "org.oppia.util",
    srcs = glob(["src/main/java/org/oppia/util/gcsresource/*.kt"]),
    resource_files = glob(["src/main/res/**/*.xml"]),
    manifest = "src/main/AndroidManifest.xml",
    deps = [
        ":dagger",
        "//model:model_lib",
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
        artifact("com.google.truth:truth"),
        artifact("androidx.appcompat:appcompat"),
        artifact("com.github.bumptech.glide:glide"),
        artifact("com.github.bumptech.glide:compiler"),
        artifact("com.caverock:androidsvg-aar"),
        artifact("androidx.lifecycle:lifecycle-livedata-ktx"),
        artifact("com.google.firebase:firebase-analytics-ktx"),
        artifact("com.crashlytics.sdk.android:crashlytics:2.9.8"),
        artifact("io.fabric.sdk.android:fabric:1.4.7"),
        artifact("com.google.gms:google-services:4.3.3"),
        artifact("com.android.support:support-annotations"),
        artifact("androidx.test.ext:junit"),
        artifact("org.mockito:mockito-core:2.19.0"),
    ],
)

kt_android_library(
    name = "utility_logging_lib",
    custom_package = "org.oppia.util",
    srcs = glob(["src/main/java/org/oppia/util/logging/*.kt"]),
    resource_files = glob(["src/main/res/**/*.xml"]),
    manifest = "src/main/AndroidManifest.xml",
    deps = [
        ":dagger",
        "//model:model_lib",
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
        artifact("com.google.truth:truth"),
        artifact("androidx.appcompat:appcompat"),
        artifact("com.github.bumptech.glide:glide"),
        artifact("com.github.bumptech.glide:compiler"),
        artifact("com.caverock:androidsvg-aar"),
        artifact("androidx.lifecycle:lifecycle-livedata-ktx"),
        artifact("com.google.firebase:firebase-analytics-ktx"),
        artifact("com.crashlytics.sdk.android:crashlytics:2.9.8"),
        artifact("io.fabric.sdk.android:fabric:1.4.7"),
        artifact("com.google.gms:google-services:4.3.3"),
        artifact("com.android.support:support-annotations"),
        artifact("androidx.test.ext:junit"),
        artifact("org.mockito:mockito-core:2.19.0"),
    ],
)

kt_android_library(
    name = "utility_networking_lib",
    custom_package = "org.oppia.util",
    srcs = glob(["src/main/java/org/oppia/util/networking/*.kt"]),
    resource_files = glob(["src/main/res/**/*.xml"]),
    manifest = "src/main/AndroidManifest.xml",
    deps = [
        ":dagger",
        "//model:model_lib",
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
        artifact("com.google.truth:truth"),
        artifact("androidx.appcompat:appcompat"),
        artifact("com.github.bumptech.glide:glide"),
        artifact("com.github.bumptech.glide:compiler"),
        artifact("com.caverock:androidsvg-aar"),
        artifact("androidx.lifecycle:lifecycle-livedata-ktx"),
        artifact("com.google.firebase:firebase-analytics-ktx"),
        artifact("com.crashlytics.sdk.android:crashlytics:2.9.8"),
        artifact("io.fabric.sdk.android:fabric:1.4.7"),
        artifact("com.google.gms:google-services:4.3.3"),
        artifact("com.android.support:support-annotations"),
        artifact("androidx.test.ext:junit"),
        artifact("org.mockito:mockito-core:2.19.0"),
    ],
)

kt_android_library(
    name = "utility_parser_lib",
    custom_package = "org.oppia.util",
    srcs = glob(["src/main/java/org/oppia/util/parser/*.kt"]),
    resource_files = glob(["src/main/res/**/*.xml"]),
    manifest = "src/main/AndroidManifest.xml",
    deps = [
        ":dagger",
        "//model:model_lib",
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
        artifact("com.google.truth:truth"),
        artifact("androidx.appcompat:appcompat"),
        artifact("com.github.bumptech.glide:glide"),
        artifact("com.github.bumptech.glide:compiler"),
        artifact("com.caverock:androidsvg-aar"),
        artifact("androidx.lifecycle:lifecycle-livedata-ktx"),
        artifact("com.google.firebase:firebase-analytics-ktx"),
        artifact("com.crashlytics.sdk.android:crashlytics:2.9.8"),
        artifact("io.fabric.sdk.android:fabric:1.4.7"),
        artifact("com.google.gms:google-services:4.3.3"),
        artifact("com.android.support:support-annotations"),
        artifact("androidx.test.ext:junit"),
        artifact("org.mockito:mockito-core:2.19.0"),
    ],
)

kt_android_library(
    name = "utility_profile_lib",
    custom_package = "org.oppia.util",
    srcs = glob(["src/main/java/org/oppia/util/profile/*.kt"]),
    resource_files = glob(["src/main/res/**/*.xml"]),
    manifest = "src/main/AndroidManifest.xml",
    deps = [
        ":dagger",
        "//model:model_lib",
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
        artifact("com.google.truth:truth"),
        artifact("androidx.appcompat:appcompat"),
        artifact("com.github.bumptech.glide:glide"),
        artifact("com.github.bumptech.glide:compiler"),
        artifact("com.caverock:androidsvg-aar"),
        artifact("androidx.lifecycle:lifecycle-livedata-ktx"),
        artifact("com.google.firebase:firebase-analytics-ktx"),
        artifact("com.crashlytics.sdk.android:crashlytics:2.9.8"),
        artifact("io.fabric.sdk.android:fabric:1.4.7"),
        artifact("com.google.gms:google-services:4.3.3"),
        artifact("com.android.support:support-annotations"),
        artifact("androidx.test.ext:junit"),
        artifact("org.mockito:mockito-core:2.19.0"),
    ],
)

kt_android_library(
    name = "utility_statusbar_lib",
    custom_package = "org.oppia.util",
    srcs = glob(["src/main/java/org/oppia/util/statusbar/*.kt"]),
    resource_files = glob(["src/main/res/**/*.xml"]),
    manifest = "src/main/AndroidManifest.xml",
    deps = [
        ":dagger",
        "//model:model_lib",
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
        artifact("com.google.truth:truth"),
        artifact("androidx.appcompat:appcompat"),
        artifact("com.github.bumptech.glide:glide"),
        artifact("com.github.bumptech.glide:compiler"),
        artifact("com.caverock:androidsvg-aar"),
        artifact("androidx.lifecycle:lifecycle-livedata-ktx"),
        artifact("com.google.firebase:firebase-analytics-ktx"),
        artifact("com.crashlytics.sdk.android:crashlytics:2.9.8"),
        artifact("io.fabric.sdk.android:fabric:1.4.7"),
        artifact("com.google.gms:google-services:4.3.3"),
        artifact("com.android.support:support-annotations"),
        artifact("androidx.test.ext:junit"),
        artifact("org.mockito:mockito-core:2.19.0"),
    ],
)

kt_android_library(
    name = "utility_system_lib",
    custom_package = "org.oppia.util",
    srcs = glob(["src/main/java/org/oppia/util/system/*.kt"]),
    resource_files = glob(["src/main/res/**/*.xml"]),
    manifest = "src/main/AndroidManifest.xml",
    deps = [
        ":dagger",
        "//model:model_lib",
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
        artifact("com.google.truth:truth"),
        artifact("androidx.appcompat:appcompat"),
        artifact("com.github.bumptech.glide:glide"),
        artifact("com.github.bumptech.glide:compiler"),
        artifact("com.caverock:androidsvg-aar"),
        artifact("androidx.lifecycle:lifecycle-livedata-ktx"),
        artifact("com.google.firebase:firebase-analytics-ktx"),
        artifact("com.crashlytics.sdk.android:crashlytics:2.9.8"),
        artifact("io.fabric.sdk.android:fabric:1.4.7"),
        artifact("com.google.gms:google-services:4.3.3"),
        artifact("com.android.support:support-annotations"),
        artifact("androidx.test.ext:junit"),
        artifact("org.mockito:mockito-core:2.19.0"),
    ],
)

kt_android_library(
    name = "utility_threading_lib",
    custom_package = "org.oppia.util",
    srcs = glob(["src/main/java/org/oppia/util/threading/*.kt"]),
    resource_files = glob(["src/main/res/**/*.xml"]),
    manifest = "src/main/AndroidManifest.xml",
    deps = [
        ":dagger",
        "//model:model_lib",
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
        artifact("com.google.truth:truth"),
        artifact("androidx.appcompat:appcompat"),
        artifact("com.github.bumptech.glide:glide"),
        artifact("com.github.bumptech.glide:compiler"),
        artifact("com.caverock:androidsvg-aar"),
        artifact("androidx.lifecycle:lifecycle-livedata-ktx"),
        artifact("com.google.firebase:firebase-analytics-ktx"),
        artifact("com.crashlytics.sdk.android:crashlytics:2.9.8"),
        artifact("io.fabric.sdk.android:fabric:1.4.7"),
        artifact("com.google.gms:google-services:4.3.3"),
        artifact("com.android.support:support-annotations"),
        artifact("androidx.test.ext:junit"),
        artifact("org.mockito:mockito-core:2.19.0"),
    ],
)

#TODO: Build all tests
kt_android_library(
    name = "async",
    custom_package = "org.oppia.util",
    srcs = ["src/main/java/org/oppia/util/data/AsyncResult.kt"],
    resource_files = glob(["src/main/res/**/*.xml"]),
    manifest = "src/main/AndroidManifest.xml",
    deps = [
        ":dagger",
        "//testing:testing_main_lib",
        artifact("com.google.truth:truth"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
        artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
        artifact("androidx.lifecycle:lifecycle-livedata-ktx"),
        artifact("io.fabric.sdk.android:fabric:1.4.7"),
        artifact("org.mockito:mockito-core:2.19.0"),
        artifact("androidx.test.ext:junit"),
        artifact("com.github.bumptech.glide:glide"),
        artifact("com.github.bumptech.glide:compiler"),
        artifact("com.caverock:androidsvg-aar"),
        artifact("androidx.appcompat:appcompat"),
        artifact("androidx.core:core-ktx"),
        artifact("junit:junit"),
        artifact("org.jetbrains.kotlin:kotlin-stdlib-jdk7:jar"),
    ],
)

kt_android_library(
    name = "async_test_lib",
    custom_package = "org.oppia.util",
    srcs = ["src/test/java/org/oppia/util/data/AsyncResultTest.kt"],
    resource_files = glob(["src/main/res/**/*.xml"]),
    manifest = "src/test/TestManifest.xml",
    deps = [
        ":async",
        ":dagger",
        "@robolectric//bazel:android-all",
        "@maven//:org_robolectric_robolectric",
        artifact("org.jetbrains.kotlin:kotlin-test-junit:1.3.72"),
    ],
)

android_local_test(
   name = "async_tests",
   custom_package = "org.oppia.util",
   test_class = "org.oppia.util.data.AsyncResultTest",
   manifest = "src/test/TestManifest.xml",
   deps = [
       ":async_test_lib",
       "@robolectric//bazel:android-all",
       "@maven//:org_robolectric_robolectric",
       artifact("com.google.truth:truth"),
       artifact("org.jetbrains.kotlinx:kotlinx-coroutines-core"),
               artifact("org.jetbrains.kotlinx:kotlinx-coroutines-android"),
               artifact("org.jetbrains.kotlinx:kotlinx-coroutines-test"),
               artifact("androidx.lifecycle:lifecycle-livedata-ktx"),
               artifact("io.fabric.sdk.android:fabric:1.4.7"),
               artifact("org.mockito:mockito-core:2.19.0"),
               artifact("androidx.test.ext:junit"),
               artifact("com.github.bumptech.glide:glide"),
               artifact("com.github.bumptech.glide:compiler"),
               artifact("com.caverock:androidsvg-aar"),
               artifact("androidx.appcompat:appcompat"),
               artifact("androidx.core:core-ktx"),
               artifact("junit:junit"),
               artifact("org.jetbrains.kotlin:kotlin-stdlib-jdk7:jar"),
   ],
 )

android_local_test(
   name = "demo_test",
     custom_package = "org.oppia.util",
     test_class = "org.oppia.util.data.DemoJavaTest",
     srcs = ["src/test/java/org/oppia/util/data/DemoJavaTest.java"],
     manifest = "src/test/TestManifest.xml",
     deps = [
         #":async_test_lib",
         "@robolectric//bazel:android-all",
         "@maven//:org_robolectric_robolectric",
         artifact("com.google.truth:truth"),
         artifact("junit:junit"),
         artifact("org.robolectric:annotations:4.3"),
         artifact("androidx.test.ext:junit"),
   ],
)

#TODO: Get android_local_test working with kotlin files
'''
kt_android_library(
    name = "test_lib",
    custom_package = "org.oppia.util",
    srcs = glob(["src/test/**/*.kt", "src/test/**/**/*.kt"]),
    resource_files = glob(["src/main/res/**/*.xml", "src/main/res/**/*.png"]),
    manifest = "src/test/TestManifest.xml",
    deps = [
        ":utility_lib",
    ],
)
'''
'''
android_local_test(
  name = "all_tests",
  custom_package = "org.oppia.util",
  test_class = "org.oppia.util",
  manifest = "src/test/TestManifest.xml",
  deps = [
      ":test_lib",
      "@robolectric//bazel:android-all",
      artifact("org.robolectric:robolectric"),
      artifact("junit:junit"),
  ],

)
'''

dagger_rules()
