name: CI Lint and Tests

# Controls when the action will run. Triggers the workflow on pull request
# events or push events in the develop branch.
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      # Push events on develop branch
      - develop

# This workflow has the following jobs:
# linters: Kotlin and Protobuf Linting
# robolectric_tests: Robolectric tests for all modules except the app module
# app_tests: Non-flaky Robolectric tests for the app module
# bazel_build_app: Build & upload the app binary to verify Bazel builds still work
# app_emulator_tests: Run whitelisted app module Espresso tests using an emulator
jobs:
  linters:
    if: "false"
    name: Lint Tests
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Download Ktlint
        run: |
          KTLINT="0.37.0"
          echo Using Ktlint $KTLINT
          curl -sSLO https://github.com/pinterest/ktlint/releases/download/$KTLINT/ktlint
          chmod a+x ktlint

      -  name: Download buf
         run: |
           BUFVERSION="v0.15.0"
           echo Using Bufbuild version $BUFVERSION
           curl -sSL https://github.com/bufbuild/buf/releases/download/$BUFVERSION/buf-$(uname -s)-$(uname -m) > buf
           chmod a+x buf

      - name: Kotlin lint check
        run: ./ktlint --android domain/src/**/*.kt utility/src/**/*.kt data/src/**/*.kt app/src/**/*.kt testing/src/**/*.kt && echo "Lint completed successfully"

      - name: Protobuf lint check
        run: ./buf check lint --input=model/src/main/proto --input-config buf.yaml && echo "Protobuf lint check completed successfully"

  robolectric_tests:
    if: "false"
    name: Robolectric Tests (Non-App Modules)
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        id: cache
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}-jars-{{ checksum "build.gradle" }}

      - name: Set up JDK 1.9
        uses: actions/setup-java@v1
        with:
          java-version: 1.9

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./gradlew --full-stacktrace androidDependencies

      - name: Build App
        # We require 'sudo' to avoid an error of the existing android sdk. See https://github.com/actions/starter-workflows/issues/58
        run: sudo ./gradlew --full-stacktrace assembleDebug

      - name: Utility tests
        # We require 'sudo' to avoid an error of the existing android sdk. See https://github.com/actions/starter-workflows/issues/58
        run:  sudo ./gradlew --full-stacktrace :utility:testDebugUnitTest
      - name: Upload Utility Test Reports
        uses: actions/upload-artifact@v2
        if: ${{ always() }} # IMPORTANT: Upload reports regardless of status
        with:
          name: utility reports
          path: utility/build/reports

      - name: Domain tests
        # We require 'sudo' to avoid an error of the existing android sdk. See https://github.com/actions/starter-workflows/issues/58
        run:  sudo ./gradlew --full-stacktrace :domain:testDebugUnitTest
      - name: Upload Domain Test Reports
        uses: actions/upload-artifact@v2
        if: ${{ always() }} # IMPORTANT: Upload reports regardless of status
        with:
          name: domain reports
          path: domain/build/reports

      - name: Testing tests
        # We require 'sudo' to avoid an error of the existing android sdk. See https://github.com/actions/starter-workflows/issues/58
        run:  sudo ./gradlew --full-stacktrace :testing:testDebugUnitTest
      - name: Upload Testing Test Reports
        uses: actions/upload-artifact@v2
        if: ${{ always() }} # IMPORTANT: Upload reports regardless of status
        with:
          name: non-app-robolectric-reports
          path: testing/build/reports

  app_tests:
    if: "false"
    name: Robolectric Tests - App Module (Non-Flaky)
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}-jars-{{ checksum "build.gradle" }}

      - name: Set up JDK 1.9
        uses: actions/setup-java@v1
        with:
          java-version: 1.9

      - name: Robolectric tests - App Module
        # We require 'sudo' to avoid an error of the existing android sdk. See https://github.com/actions/starter-workflows/issues/58
        run: |
          sudo ./gradlew --full-stacktrace :app:testDebugUnitTest
      - name: Upload App Test Reports
        uses: actions/upload-artifact@v2
        if: ${{ always() }} # IMPORTANT: Upload reports regardless of status
        with:
          name: app-robolectric-reports
          path: app/build/reports

  bazel_build_app:
    if: "false"
    name: Build Binary with Bazel
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up bazel
        uses: jwlawson/actions-setup-bazel@v1
        with:
          bazel-version: '3.4.1'
      - name: Clone Oppia Bazel
        run: git clone https://github.com/oppia/bazel.git $HOME/oppia-bazel
      - name: Set up JDK 9
        uses: actions/setup-java@v1
        with:
          java-version: 9
      - name: Extract Android Tools
        run: |
          mkdir -p $GITHUB_WORKSPACE/tmp/android_tools
          cd $HOME/oppia-bazel
          unzip bazel-tools.zip
          tar -xf $HOME/oppia-bazel/android_tools.tar.gz -C $GITHUB_WORKSPACE/tmp/android_tools
      - name: Unzip Bazel Binary and Build Oppia
        run: |
          cd $HOME/oppia-bazel
          unzip bazel-build.zip
          cd $GITHUB_WORKSPACE
          chmod a+x $HOME/oppia-bazel/bazel
          $HOME/oppia-bazel/bazel build //:oppia --android_databinding_use_v3_4_args --experimental_android_databinding_v2 --override_repository=android_tools=$GITHUB_WORKSPACE/tmp/android_tools --java_header_compilation=false --noincremental_dexing --define=android_standalone_dexing_tool=d8_compat_dx
          cp $GITHUB_WORKSPACE/bazel-bin/oppia.apk /home/runner/work/oppia-android/oppia-android/
      - uses: actions/upload-artifact@v2
        with:
          name: oppia-bazel-apk
          path: /home/runner/work/oppia-android/oppia-android/oppia.apk

  app_emulator_tests:
    name: Espresso Emulator Tests - App Module (Non-Flaky)
    # Note that emulator tests must currently run on MacOS due to GitHub Actions Linux machines not
    # supporting KVM (which is required for newer Android emulators).
    runs-on: macos-10.15
    env:
      # The list of tests to run using an emulator.
      TEST_WHITELIST: org.oppia.app.splash.SplashActivityTest org.oppia.app.player.state.StateFragmentTest

      # DEVICE MAPPING: (density width_px height_px)
      # 5.5 inch xxxhdpi device.
      PIXEL_XL: (560 2560 1440)
    strategy:
      matrix:
        api-level: [29]
        target: [default]
        abi: [x86_64]
        profile: [Nexus 6]
        #profile: [Pixel XL]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
         path: ~/.gradle/caches
         key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}-jars-{{ checksum "build.gradle" }}

      # Set up Java 8 since it's required for building binaries dependent on the Android SDK.
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      #- name: Set up Homebrew
      #  uses: Homebrew/actions/setup-homebrew@master

      #- name: Install ffmpeg
      #  run: brew install ffmpeg

      - name: Set up Android SDK
        uses: malinskiy/action-android/install-sdk@release/0.0.7

      - name: Accept licenses
        run: echo y | sdkmanager --licenses

      - name: Set up platform tools, SDK tools, and system images
        run: sdkmanager "platform-tools" "platforms;android-${{ matrix.api-level }}" "system-images;android-${{ matrix.api-level }};${{ matrix.target }};${{ matrix.abi }}"

      # See https://stackoverflow.com/a/40307663 for a reference for how variable extraction works.
      - name: Extract AVD variables
        run: |
          AVD_NAME=$(echo "${{ matrix.profile }}" | tr '[:upper:]' '[:lower:]' | tr -s ' ' '_')
          DEVICE_NAME_KEY=$(echo $AVD_NAME | tr '[:lower:]' '[:upper:]')
          DENSITY_VARIABLE_NAME="${DEVICE_NAME_KEY}[0]"
          if [[ "$DENSITY_VARIABLE_NAME" == "$DEVICE_NAME_KEY" ]]; then echo "Using unknown AVD name: $AVD_NAME"; exit 1; fi
          WIDTH_PX_VARIABLE_NAME="${DEVICE_NAME_KEY}[1]"
          HEIGHT_PX_VARIABLE_NAME="${DEVICE_NAME_KEY}[2]"
          echo "::set-env name=AVD_NAME::$AVD_NAME"
          echo "::set-env name=AVD_DENSITY::${!DENSITY_VARIABLE_NAME}"
          echo "::set-env name=AVD_WIDTH_PX::${!WIDTH_PX_VARIABLE_NAME}"
          echo "::set-env name=AVD_HEIGHT_PX::${!HEIGHT_PX_VARIABLE_NAME}"

      - name: Debug AVD variables
        run: echo "Debug avd name $AVD_NAME"; echo "Debug avd density $AVD_DENSITY"; echo "Debug avd width $AVD_WIDTH_PX"; echo "Debug avd height $AVD_HEIGHT_PX"

      - name: Create AVD
        run: bash ./scripts/create_avd.sh $AVD_NAME ${{ matrix.api-level }} ${{ matrix.target }} ${{ matrix.abi }} $AVD_DENSITY $AVD_WIDTH_PX $AVD_HEIGHT_PX

      # Start an emulator with the options used by:
      # https://github.com/ReactiveCircus/android-emulator-runner.
      - name: Start Emulator
        run: $ANDROID_HOME/emulator/emulator -avd $AVD_NAME -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim &

      - name: Wait for Emulator
        run: bash ./scripts/wait_for_emulator.sh

      - name: Run emulator tests
        run: echo "Pretend to run emulator tests using $TEST_WHITELIST"
      #  run: bash ./scripts/run_emulator_tests.sh $TEST_WHITELIST

      #- name: Run emulator tests
      #  uses: ReactiveCircus/android-emulator-runner@v2.11.0
      #  with:
      #    api-level: ${{ matrix.api-level }}
      #    target: ${{ matrix.target }}
      #    profile: ${{ matrix.profile }}
      #    arch: x86_64
          # Note that 'sudo' is not run here since it will drop necessary
          # environmental variables that were overwritten above to ensure
          # correct access to the Android SDK & home directories.
      #    script: export TEST_WHITELIST="org.oppia.app.splash.SplashActivityTest org.oppia.app.player.state.StateFragmentTest"; ./scripts/run_emulator_tests.sh $TEST_WHITELIST

      - name: Stop Emulator
        run: adb -s emulator-5554 emu kill

      # Upload all test results to GitHub (including detailed reports and videos, if any).
      - uses: actions/upload-artifact@v2
        if: ${{ always() }} # IMPORTANT: Upload reports regardless of status
        with:
          name: emulator-test-output
          path: emulator_test_output/
